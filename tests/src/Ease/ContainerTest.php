<?php

declare(strict_types=1);

/**
 * This file is part of the EaseHtml package
 *
 * https://github.com/VitexSoftware/php-ease-html
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\Ease;

use Ease\Container;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-17 at 23:58:14.
 */
class ContainerTest extends SandTest
{
    /**
     * What we want to get ?
     */
    public string $rendered = '';
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Container();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \Ease\Container::__construct
     */
    public function testConstructor(): void
    {
        $tester = new \Ease\Container('test');
        $this->assertEquals('test', $tester->__toString());
    }

    /**
     * @covers \Ease\Container::addItemCustom
     */
    public function testAddItemCustom(): void
    {
        $context = new \Ease\Html\DivTag();
        Container::addItemCustom('*', $context);
        $this->assertEquals('<div>*</div>', $context->getRendered());

        $context = new \Ease\Html\DivTag();
        Container::addItemCustom(new \Ease\Html\ImgTag(''), $context);
        $this->assertEquals(
            '<div><img src="" /></div>',
            $context->getRendered(),
        );
        $this->object->addItem([new \Ease\Html\ATag('#', 'TEST'), new \Ease\Html\ATag(
            '#',
            'TEST',
        )]);
    }

    /**
     * @covers \Ease\Container::addItem
     */
    public function testAddItem(): void
    {
        $prober = new \Ease\Html\H1Tag();
        $inserted = $this->object->addItem($prober);
        $this->assertEquals(\get_class($inserted), \get_class($prober));
        $this->assertEquals($prober, end($this->object->pageParts));
    }

    /**
     * @covers \Ease\Container::addAsFirst
     */
    public function testAddAsFirst(): void
    {
        $this->object->emptyContents();
        $this->object->addItem(new \Ease\Html\DivTag());
        $this->object->addAsFirst(new \Ease\Html\SpanTag());
        $testSpan = new \Ease\Html\SpanTag();

        $this->assertEquals(
            (string) $testSpan,
            (string) current($this->object->getContents()),
        );
    }

    /**
     * @covers \Ease\Container::suicide
     */
    public function testSuicide(): void
    {
        $element = new \Ease\Html\DivTag();
        $embeded = $element->addItem($this->object);
        $this->assertTrue($embeded->suicide());
        $this->assertEmpty($element->pageParts);
        $this->assertFalse($embeded->suicide());
    }

    /**
     * @covers \Ease\Container::getItemsCount
     */
    public function testGetItemsCount(): void
    {
        $this->object->emptyContents();
        $this->assertEquals(0, $this->object->getItemsCount());
        $this->object->addItem('@');
        $this->assertEquals(1, $this->object->getItemsCount());
    }

    /**
     * @covers \Ease\Container::addNextTo
     */
    public function testAddNextTo(): void
    {
        $nest = new Container($this->object);
        $this->object->addNextTo(new \Ease\Html\SpanTag());
        $this->assertEquals(2, $nest->getItemsCount());
    }

    /**
     * @covers \Ease\Container::lastItem
     */
    public function testLastItem(): void
    {
        $this->object->addItem(new \Ease\Html\DivTag());
        $this->object->addItem(new \Ease\Html\ATag('', ''));
        $this->object->addItem(new \Ease\Html\PTag());
        $this->assertInstanceOf('\Ease\Html\PTag', $this->object->lastItem());
    }

    /**
     * @covers \Ease\Container::addToLastItem
     */
    public function testAddToLastItem(): void
    {
        $this->object->emptyContents();
        $this->object->addItem(new \Ease\Html\DivTag());
        $this->object->addToLastItem(new \Ease\Html\PreTag());
        $this->assertInstanceOf(
            '\Ease\Html\PreTag',
            $this->object->getFirstPart()->getFirstPart(),
        );
    }

    /**
     * @covers \Ease\Container::getFirstPart
     */
    public function testGetFirstPart(): void
    {
        $this->object->emptyContents();
        $this->assertNull($this->object->getFirstPart());
        $this->object->addItem(new \Ease\Html\DivTag());
        $this->object->addItem(new \Ease\Html\ATag('', ''));
        $this->object->addItem(new \Ease\Html\PTag());
        $controlDiv = new \Ease\Html\DivTag();
        $controlDiv->parentObject = $this->object;
        $this->assertEquals(\get_class($controlDiv), \get_class($this->object->getFirstPart()));
    }

    /**
     * @covers \Ease\Container::getContents
     */
    public function testGetContents(): void
    {
        $this->object->emptyContents();
        $this->assertEmpty($this->object->getContents());
    }

    /**
     * @covers \Ease\Container::addItems
     */
    public function testAddItems(): void
    {
        $this->object->emptyContents();
        $this->object->addItems([new \Ease\Html\DivTag(), new \Ease\Html\SpanTag()]);
        $this->assertEquals(2, $this->object->getItemsCount());
    }

    /**
     * @covers \Ease\Container::emptyContents
     */
    public function testEmptyContents(): void
    {
        $this->object->addItem(new \Ease\Html\DivTag());
        $this->object->emptyContents();
        $this->assertEmpty($this->object->getContents());
    }

    /**
     * @covers \Ease\Container::drawAllContents
     */
    public function testDrawAllContents(): void
    {
        $this->object->emptyContents();
        $this->object->addItem('content1');
        $this->object->addItem(new \Ease\Html\SpanTag());
        $this->object->addItem('content2');
        ob_start();
        $this->object->drawAllContents();

        switch (\get_class($this->object)) {
            case 'Ease\Container':
            case 'Ease\Document':
                $this->assertTrue(true);

                break;

            default:
                $out = ob_get_contents();
                $this->assertNotEmpty($out);

                break;
        }

        ob_end_clean();
    }

    /**
     * @covers \Ease\Container::getRendered
     */
    public function testGetRendered(): void
    {
        switch (\get_class($this->object)) {
            case 'Ease\Container':
            case 'Ease\Document':
                $this->assertEmpty($this->object->getRendered());

                break;

            default:
                $this->object->addItem('*');
                $this->assertNotEmpty($this->object->getRendered());

                break;
        }
    }

    /**
     * @covers \Ease\Container::drawIfNotDrawn
     *
     * @param mixed $canBeEmpty
     */
    public function testDrawIfNotDrawn($canBeEmpty = false): void
    {
        ob_start();
        $this->object->drawIfNotDrawn();
        $out = ob_get_contents();
        $this->assertEquals($this->rendered, $out);
        ob_end_clean();
        ob_start();
        $this->object->drawIfNotDrawn();
        $this->assertEmpty(ob_get_contents());
        ob_end_clean();
    }

    /**
     * @covers \Ease\Container::isFinalized
     */
    public function testIsFinalized(): void
    {
        $this->assertFalse($this->object->isFinalized());
        $this->object->setFinalized();
        $this->assertTrue($this->object->isFinalized());
    }

    /**
     * @covers \Ease\Container::setFinalized
     */
    public function testSetFinalized(): void
    {
        $this->object->setFinalized();
        $this->assertTrue($this->object->isFinalized());
    }

    /**
     * @covers \Ease\Container::isEmpty
     */
    public function testIsEmpty(): void
    {
        $this->object->emptyContents();
        $this->assertTrue($this->object->isEmpty());
        $this->object->addItem('@');
        $this->assertFalse($this->object->isEmpty($this->object));
    }

    /**
     * @covers \Ease\Container::draw
     *
     * @param null|mixed $whatWant
     */
    public function testDraw($whatWant = null): void
    {
        ob_start();
        $this->object->emptyContents();
        $this->object->addItem(new \Ease\Html\SmallTag('test'));
        $this->object->addItem('test2');
        $this->object->draw();

        switch (\get_class($this->object)) {
            case 'Ease\Container':
            case 'Ease\Document':
                $this->assertTrue(true);

                break;

            default:
                $out = ob_get_contents();
                $this->assertNotEmpty($out);

                if (null !== $whatWant) {
                    $this->assertEquals($whatWant, $out);
                }

                break;
        }

        ob_end_clean();
    }

    /**
     * @covers \Ease\Container::__toString
     */
    public function testToString(): void
    {
        $result = $this->object->__toString();

        switch (\get_class($this->object)) {
            case 'Ease\Container':
            case 'Ease\Document':
                $this->assertTrue(true);

                break;

            default:
                $this->assertIsString($result);

                break;
        }
    }
}
