<?php

declare(strict_types=1);

/**
 * This file is part of the EaseHtml package
 *
 * https://github.com/VitexSoftware/php-ease-html
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\Ease\Html;

use Ease\Html\PairTag;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-17 at 23:59:15.
 */
class PairTagTest extends TestCase
{
    /**
     * What we want to get ?
     */
    public string $rendered = '<></>';
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new PairTag();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \Ease\Html\PairTag::__construct
     * Check Constructor.
     */
    public function testConstructor(): void
    {
        $classname = \get_class($this->object);
        // Provide a default argument for subclasses that require it
        $reflection = new \ReflectionClass($classname);
        $constructor = $reflection->getConstructor();
        $params = $constructor ? $constructor->getParameters() : [];
        $args = [];

        if (\count($params) > 0) {
            // Provide a default string for the first argument
            $args[] = 'Test';
        }

        if (\count($params) > 1) {
            // Provide an empty array for the second argument if needed
            $args[] = [];
        }

        $instance = $reflection->newInstanceArgs($args);
        $this->assertNotEmpty($instance->getRendered());
    }

    /**
     * @covers \Ease\Html\PairTag::draw
     *
     * @param null|mixed $whatWant
     */
    public function testDraw($whatWant = null): void
    {
        $tagType = $this->object->getTagType();

        if (null === $whatWant) {
            if (null === $this->rendered) {
                if (!empty($this->object->tagProperties)) {
                    $whatWant = "<{$tagType} ".$this->object->tagPropertiesToString()."></{$tagType}>";
                } else {
                    $whatWant = "<{$tagType}></{$tagType}>";
                }
            } else {
                $whatWant = $this->rendered;
            }
        }

        ob_start();
        $this->object->draw();
        $drawed = ob_get_contents();
        ob_end_clean();
        $this->assertEquals($whatWant, $drawed);
    }

    /**
     * @covers \Ease\Html\PairTag::tagBegin
     *
     * @param null|mixed $tagBegin
     */
    public function testTagBegin($tagBegin = null): void
    {
        $tagType = $this->object->getTagType();

        if (!empty($this->object->tagProperties)) {
            $tagBegin = '<'.trim($tagType.' '.$this->object->tagPropertiesToString()).'>';
        } else {
            $tagBegin = "<{$tagType}>";
        }

        ob_start();
        $this->object->tagBegin();
        $drawed = ob_get_contents();
        ob_end_clean();
        $this->assertEquals($tagBegin, $drawed);
    }

    /**
     * @covers \Ease\Html\PairTag::tagEnclousure
     */
    public function testTagEnclousure(): void
    {
        $tagType = $this->object->getTagType();

        if (empty($tagType)) {
            $tagType = 'test';
            $this->object->setTagType($tagType);
        }

        ob_start();
        $this->object->tagEnclousure();
        $drawed = ob_get_contents();
        ob_end_clean();
        $this->assertEquals("</{$tagType}>", $drawed);
    }
}
